@{
    ViewBag.Title = "书目简编";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section Scripts {

    <script>

        //$(document).ready调用是jQuery推迟函数执行的一项标准技术，
        //它直到浏览器加载并处理了文档的所有HTML元素之后才会执行。
        //$(document).ready(function () {
        //    //alert("test");
        //});


        // 保存书目
        function saveBiblio() {

            var headerV = getHeaderValue();
            //alert("[" + headerV + "]");
            //return;

            // 图书馆
            var libId = getLibId();//$("#selLib").val();
            if (libId == "" || libId == null) {
                alert("您尚未选择图书馆。");
                return;
            }

            var weixinId = $("#weixinId").text();
            if (weixinId == null || weixinId == "") {
                alert("weixinId参数为空");
                return;
            }

            // 动作
            var biblioAction = $("#biblioAction").text();
            if (biblioAction == null || biblioAction == "") {
                alert("编辑书目时action参数不能为空");
                return;
            }

            // 时间戳
            var biblioTimestamp = "";
            if (biblioAction == "change") {
                biblioTimestamp = $("#biblioTimestamp").text();
                if (biblioTimestamp == null || biblioTimestamp == "") {
                    alert("编辑书目时timestamp参数不能为空");
                    return;
                }
            }

            // biblio path是放在一个不可编辑的输入框
            var biblioPath = $("#biblioPath").val();
            if (biblioPath == null || biblioPath == "") {
                alert("书目路径不能为空");
                return;
            }

            var warnInfo = "";


            // 拼装field字符串
            var field = "";
            $("#_marcEditor").find("._field").each(function (index) {
                //alert(index);//循环的下标值，从0开始

                // 取出值
                var id = $(this).attr("id");

                var value = $(this).val();

                // 2022/10/25
                if (id.indexOf("*") != -1 && 
                    (value==null || value=="")) {

                    var temp = id;
                    var index1 = id.indexOf("|");
                    if (index1 > 0)
                        temp = temp.substring(0, index1);

                    if (warnInfo != "")
                        warnInfo += "\r\n";
                    warnInfo += temp+"字段内容不能为空。";
                    //return;
                }

                // 如果



                field += id + "|" + value + "\r\n";
            });
            //alert(field);

            if (warnInfo != "") {
                alert(warnInfo);
                return;
            }

            //显示等待图层
            showMaskLayer();

            // 登录帐户和类型
            var loginUserName = getLoginUserName();
            var loginUserType = getLoginUserType();

            // web api
            var url = "/api2/BiblioApi/SetBiblio?loginUserName=" + encodeURIComponent(loginUserName)
                + "&loginUserType=" + loginUserType
                + "&weixinId=" + weixinId
                + "&libId=" + libId

            //alert(url);
            sendAjaxRequest(url, "POST",
                function (result) {
                    // 关闭等待层
                    hideMaskLayer();


                    if (result.errorCode == -1) {
                        alert(result.errorInfo);
                        return;
                    }

                    if (biblioAction == "new") {
                        alert("新增书目成功。");

                        gotoUrl("/biblio/biblioEdit?biblioPath=" + result.biblioPath);

                        //// 转成编辑状态
                        //$("#biblioAction").text("change");
                        //$("#biblioPath").val(result.biblioPath);
                        //$("#biblioTimestamp").text(result.biblioTimestamp);
                        //$("#btnOpeType").text("保存");

                        //// 让再次新增 和 查看详情 的锚点显示出来
                        //$("#again").css('display', 'block');
                        //$("#detail").css('display', 'block');
                    }
                    else {
                        alert("保存书目成功。");
                        $("#biblioTimestamp").text(result.biblioTimestamp);
                    }

                    //alert(result.biblioPath + "-" + result.biblioTimestamp);


                    // todo 新增和编辑完成，还停留在这个界面，不跳转。
                    // 那么针对编辑的情况，可以再次编辑，所以这次更新一下时间戳

                    // 新增处理可以有两种情况：一是变成保存，那么如果用户还想继续新增一条，就得另点一下新增。
                    // 另一种就是清空界面，还是新增界面，但这样就不方便查看原来的那条记录，需要加一个查看完整信息的锚点。
                    // 这两种各有优点

                    /*
                    $("#_recPath").text(result.recPath);
                    $("#_timestamp").text(result.timestamp);
                    //清空编辑界面信息,todo
                    */

                },
                function (xhq, textStatus, errorThrown) {
                    // 关闭等待层
                    hideMaskLayer();
                    alert(errorThrown);
                },
                {
                    BiblioPath: biblioPath,
                    Action: biblioAction,
                    Header: headerV,
                    Fields: field,
                    Timestamp: biblioTimestamp
                }
            );
        }

        // 展开头标区
        function expandHeader(expId) {

            //根据id找到元素
            var id = "#" + expId;
            var obj = $(id);



            // 取元素下级的样式为mui-collapse-content的元素
            var state = $(obj).find(".mui-collapse-content").first().css("display");

            // 如果自己是展开状态，则收缩
            if (state == "block") {

                //alert("1");
                //自己本来是展开状态，则收缩
                $(obj).find(".mui-collapse-content").css("display", "none");
                //$(obj).removeClass("mui-active");
                $('#btn-header').text("展开");
            }
            else {
               // alert("2");
                //自己本是关闭状态，则展开
                $(obj).find(".mui-collapse-content").css("display", "block");
                //$(obj).addClass("mui-active");
                $('#btn-header').text("收缩");
            }
        }

        // 获取值
        function getHeaderValue() {

            //?????nam0 22?????   45__

            // 字段id的命名 与 位置长度一致，省脑细胞。
            var h0L5 = $("#h0L5").val().padEnd(5, "?").substring(0, 5);
            //alert("h0Len5=[" + h0Len5 + "]");

            var h5L1 = $("#h5L1").val().padEnd(1, " ").substring(0, 1);
            var h6L1 = $("#h6L1").val().padEnd(1, " ").substring(0, 1);
            var h7L1 = $("#h7L1").val().padEnd(1, " ").substring(0, 1);
            var h8L1 = $("#h8L1").val().padEnd(1, " ").substring(0, 1);
            var h9L1 = $("#h9L1").val().padEnd(1, " ").substring(0, 1);
            var h10L1 = $("#h10L1").val().padEnd(1, " ").substring(0, 1);
            var h11L1 = $("#h11L1").val().padEnd(1, " ").substring(0, 1);

            var h12L5 = $("#h12L5").val().padEnd(5, "?").substring(0, 5);
            var h17L1 = $("#h17L1").val().padEnd(1, " ").substring(0, 1);
            var h18L1 = $("#h18L1").val().padEnd(1, " ").substring(0, 1);
            var h19L1 = $("#h19L1").val().padEnd(1, " ").substring(0, 1);
            var h20L4 = $("#h20L4").val().padEnd(4, " ").substring(0, 4);

            var headerContent = h0L5 + h5L1 + h6L1 + h7L1 + h8L1 + h9L1 + h10L1 + h11L1
                + h12L5 + h17L1 + h18L1 + h19L1 + h20L4;

            return headerContent;
        }

    </script>
}

@section style {
    <style>
        .block {
            background-color: #dddddd;
            margin-top: 10px;
            vertical-align: middle;
            text-align: center;
        }

        .page {
            background-color: lightyellow;
        }

        /*头标区*/
        DIV.marcheader {
            margin: 5px 0px 0px;
            padding: 2px;
            font-size: 10px;
        }
            /*一条一条的栏位*/
            DIV.marcheader TABLE {
                text-align: left;
                background-color: white;
                width: 100%;
                margin-top: 0px;
            }

            DIV.marcheader .myinput {
                text-align: left;
                height: 30px;
                padding: 0px;
                margin: 1px;
                font-size: 10px;
                border: 1px solid gray
            }

            DIV.marcheader .label {
                width: 180px;
                /*max-width: 190px;*/
                /* min-width: 190px;*/
                background-color: #ffffff;
                color: #999999;
                padding-right: 2px;
                text-align: right;
            }
    </style>
}


@section header {
    <h1 class="mui-title">书目编辑</h1>
}
<span id="weixinId" style="display:none;">@ViewBag.weixinId</span>
<span id="biblioTimestamp" style="display:none">@ViewBag.biblioTimestamp</span>
<span id="biblioAction" style="display:none">@ViewBag.biblioAction</span>

@if (String.IsNullOrEmpty(ViewBag.Error) == false)
{
    <div class="mui-content-padded">
        <span class="errorinfo">
            @Html.Raw(ViewBag.Error)
        </span>
    </div>
}
else
{

    if (String.IsNullOrEmpty(ViewBag.Error) == false)
    {
        <div class="mui-content-padded">
            <span class="errorinfo">
                @Html.Raw(ViewBag.Error)
            </span>
        </div>
    }
    else
    {

        <div>@Html.Raw(ViewData["marcField"])</div>
    }

}

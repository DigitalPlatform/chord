 @model dp2weixin.service.WxUserItem
@{
    ViewBag.Title = "普通借还";
    Layout = "~/Views/Shared/_LayoutEmpty.cshtml";
}

@section Scripts {
    <script>

        //==全局变量====

        // 流程是否停止
        var _stop = false;

        // 操作类型常量字符串
        var C_ope_borrow = "borrow";
        var C_ope_return = "return";
        var C_ope_searchItem = "searchItem";

        // 输入框值类型
        var C_inputType_patron = 1;
        var C_inputType_item = 2;

        // 来源方式常量
        var C_from_scan = 1;
        var C_from_textbox = 2;

        // 下一步
        var C_next_dothing = "dothing";
        var C_next_receiveBarcode = "receiveBarcode";
        var C_next_addCmd="addCmd";//2016-11-16 用于借书时，应扫书，却扫了读者，提示完，要进行加载读者事情。

        // controlType
        var C_controlType_manual = "manual";
        var C_controlType_manualAuto = "manualAuto";
        var C_controlType_auto = "auto";

        // 条码来源方式
        //var _from = 2; //1 扫码方式  2输入框方式

        // 流程控制方式
        //var _controlType = "auto";//自动

        //========================

        // 程序启动
        $(document).ready(function () {
            //doThing();

            var isMobile = false;
            var u = navigator.userAgent, app = navigator.appVersion;
            if (u.indexOf('Android') > -1 || u.indexOf('iPhone') > -1 || u.indexOf('iPad') > -1)//是否为移动终端
            {
                isMobile = true;
                //alert("移动");
            }
            else {
                //alert("桌面");
            }
            if (isMobile == false)
            {
                //#from
                $("#from").val(2);
                $("#from").attr("disabled", true);
                $("#from").css("color", "#cccccc");
            }

            //if (u.indexOf('MicroMessenger') > -1) {
            //    alert("微信");
            //}
            //else {
            //    alert("非微信");
            //}

            // 设置缺省环境为借书
            setOpe(C_ope_borrow);

            // 得到全部命令
            getAllCmd();
        });



        // 主页界的开始按钮
        function start(ope) {

            // 先隐藏主页面
            hideMainPage();

            // 设_stop变量开始
            _stop = false;

            // 设置操作类型
            setOpe(ope);

            // 开始做事
            dothing();
        }

        // 做一轮事函数
        function dothing() {
            var desc = "<span style='font-size:18pt;line-height:1.3'>"+ getInputTypeDesc(false)+"</span>";

            // 先提示,然后下一步为扫码
            warn(desc, C_next_receiveBarcode);
        }

        // 弹出提示界面，next表示下面要做的步骤，如果next为空则停止
        function warn(text, next,isAutoClose) {
            hideMainPage();

            var html = "";

            // 显示场景+停止按钮
            var scene = "";//getScene();

            html += "<table style='width:100%;margin-top:10px'><tr>"
                + "<td style='width:100%;text-align:center'>"
                + "<span style='font-size:14.8px'>" + scene + "</span>"
                + "</td>"
                + "<td style='width:80px;padding-right:10px'>"
                +"<div id='stop'>"
                //+ "<button class='mui-btn mui-btn-primary' onclick='_stop=true;layer.closeAll();'>停止</button>"
                +"</div>"
                + "</td>"
                + "</tr></table>"

            // 具体信息 + 跳过
            html += "<div class='middle'>"
                + text
                + "<div id='continue' style='padding-top:10px;'>" //text-align:right'
                //+"<a href='javascript:;' onclick='layer.closeAll();'>继续</a>"
                +"<div>"
                + "</div>";

            var mystyle = "position:fixed; left:0; top:0; width:100%; height:100%; border: none;";  //background-color:black;color:white

            var bTime = false;
            var controlType = getControlType();
            if (controlType == C_controlType_manual)
                bTime = false;
            else if (controlType == C_controlType_auto)
                bTime = true;
            else if (controlType == C_controlType_manualAuto)
            {
                if (isAutoClose == false)
                    bTime = false;
                else
                    bTime = true;
            }
            //====弹层开始============
            if (bTime == false) {
                //不自动关闭
                var pageii = layer.open({
                    type: 1
                    , content: html
                    , style: mystyle
                    , end: function (index) {
                        //layer.close(index);// todo，是否需要再次关闭图层？
                        warnNext(next);
                    }
                });
            }
            else {
                var pageii = layer.open({
                    type: 1
                    , content: html
                    , time: 5
                    , style: mystyle
                    , end: function (index) {                        
                        //layer.close(index);// todo，是否需要再次关闭图层？
                        warnNext(next);
                    }
                });
            }
            //===弹层结束====

            // 等待2秒出来stop按钮
            window.setTimeout("showStop()", 1000 * 1);

            // 等待2秒出来continue按钮
            window.setTimeout("showContinue()", 1000 *1);

        }

        //进入下一步
        function warnNext(next)
        {

            //如果没有下一步，设为停止状态
            if (next == null || next == "") {
                _stop = true;
            }

            // 如果是停止状态，或者没有下一步，则不再循环，回到主页面
            if (_stop == true) {
                showMainPage();
                return;
            }

            // 继续下面的操作
            if (next == C_next_dothing) {
                dothing();
            }
            else if (next == C_next_receiveBarcode) {
                receiveBarcode();
            }
            else if(next==C_next_addCmd) //2016-11-16
            {
                addCmd();
            }
            else {
                alert("不认识的下一步命令:" + next);
                showMainPage();
                return;
            }
        }

        // 显示退出按钮
        function showStop()
        {
            var html = "<button class='mui-btn mui-btn-default' onclick='_stop=true;layer.closeAll();'>退出</button>";
            $("#stop").html(html);
        }

        // 显示继续按钮
        function showContinue() {

            var html = "<table style='width:100%'>"
    + "<tr>"
        + "<td style='width:100%'><button class='mui-btn mui-btn-block' onclick='layer.closeAll();'>继续</button></td>"
        //+ "<td style='width:65px;min-width:65px;'>"
        //    + "&nbsp;<span class='mui-icon-extra mui-icon-extra-sweep' onclick='convertFrom(" + C_from_scan + ")' style='font-size:20pt;cursor:pointer'></span>"
        //    + "&nbsp;<span class='mui-icon-extra mui-icon-extra-calc' onclick='convertFrom(" + C_from_textbox + ")' style='font-size:20pt;cursor:pointer'></span>"
        //+ "</td>"
    + "</tr>"
+ "</table>";

            //var html = "<button class='mui-btn mui-btn-block' onclick='layer.closeAll();'>继续</button>";//"<a href='javascript:;' onclick='layer.closeAll();'>继续</a>";
            $("#continue").html(html);
        }

        // 中间转换输入方式
        function convertFrom(from)
        {
            setFrom(from);

            layer.closeAll();
        }

        // 接收二维码
        function receiveBarcode() {
            var from = getFrom();
            if (from == C_from_scan) {
                openScanBarcode();
            }
            else if (from == C_from_textbox) {
                openTextBox();
            }
        }

        // 打开扫码界面
        function openScanBarcode() {

            // 先遮挡
            hideMainPage();
            // 1分钟后去掉遮挡
            window.setTimeout("showMainPage()", 1000);



            // 这里先设_stop为true，是为了处理用户在扫描界面，直接按了微信的回车按钮
            _stop = true;

            if (jssdkReady == -1) {
                warn('JSSDK config信息验证失败，不能使用扫码功能。', "");
                return;
            }
            else if (jssdkReady == 0) {
                warn('JSSDK config未初始化完成，请稍候再试。', "");
                return;
            }

            try {
                wx.scanQRCode({
                    needResult: 1, // 默认为0扫描结果由微信处理，1则直接返回扫描结果，
                    scanType: ["qrCode", "barCode"], // 可以指定扫二维码还是一维码，默认二者都有
                    success: function (res) {
                        hideMainPage();

                        // 设为false
                        _stop = false;

                        var code = res.resultStr; // 当needResult 为 1 时，扫码返回的结果

                        // 先将到扫到的code设到条码内部变量上
                        setBarcode(code);



                        // 处理下册条码，去掉,号前面的类型标识
                        var inputType = getInputType();
                        if (inputType == C_inputType_item) {
                            if (code.indexOf(",") != -1) {
                                // alert(code);
                                var left = code.substring(0, code.indexOf(","))
                                var right = code.substring(code.indexOf(",") + 1)
                                // 2020/11/23 合肥56中史老师用CODABAR编码方式打印的条码
                                if (left != "EAN_13" && left != "CODE_39"
                                    && left != "CODE_128" && left != "CODABAR") //20181012 增加识别CODE_128码
                                {
                                    // 扫描的册条码不对了，提示一下，允许继续输入
                                    warn("扫描结果["+code+"]不是册条码或者ISBN号", C_next_receiveBarcode);
                                    return;
                                }

                                // 设置处理好的册条码
                                setBarcode(right);
                            }
                        }
                        else {
                            // 如果前面带了CODE_39，则去掉
                            if (code.indexOf(",") != -1) {
                                var left = code.substring(0, code.indexOf(","))
                                var right = code.substring(code.indexOf(",") + 1)
                                if (left == "CODE_39" || left == "CODE_128") //20181012 增加识别CODE_128码
                                {
                                    setBarcode(right);
                                }
                            }
                        }
                        

                        // 执行命令 todo 是否可以不用setTimeout
                        window.setTimeout("addCmd('')", 1);
                    },
                    fail: function (res) {
                        var error = "扫码返回出错:" + JSON.stringify(res);
                        warn(error, ""); // 扫描严重出错的时候，停止循环
                        return;
                    },
                    complete: function (res) {
                        // 如果未做事，直接返回，则回到主页面，
                        //对于android其实可以用cancel事件，
                        //但对于ios不行，todo ios返回时也没走到complete事件里
                        if (_stop == true) {
                            showMainPage();
                        }
                    },
                    //cancel: function (res) {
                    //    alert('cancel');
                    //    _stop = true;
                    //    showPage();
                    //    return;
                    //}
                });
            }
            catch (err) {
                // 扫描严重出错的时候，停止循环
                var error = "扫码异常:" + err;
                warn(error, "");
                return;
            }
        }

        // 打开输入框界面
        function openTextBox() {
            var desc = getInputTypeDesc(false);

            // 场景提示
            var html = "";

            // 场景提示
            //html+="<center>" + desc + "</center><br>";

            // 输入框
            html += "<br/><table style='width:100%'>"
                + "<tr>"
                + "<td style='width:100%'><input id='mybarcode'  style='color:black;padding:0px;margin:0px;font-size:36pt;height:100px' type='text'  onkeypress='enter(event)' /></td>"
                + "<td ><button onclick='ok()' style='margin:0px'>确认</button></td>"
                + "</tr>"
                + "</table>";

            // ===弹层开始===
            var pageii = layer.open({
                type: 1
                , content: html
                //, anim: 'up'
                , style: 'position:fixed; left:0; top:0; width:100%; height:100%; border: none;'//background-color:black;color:white
                , end: function (index) {
                    layer.close(index); //todo
                    addCmd();
                }
            });
            //===弹层结束===

            $("#mybarcode").focus();
        }



        // 执行命令
        function addCmd() {

            // 图书馆
            var libId = $("#libId").text(); //getLibId();
            if (libId == "" || libId == null) {
                warn("您尚未选择图书馆。",""); // 下一步停止
                return;
            }

            var libraryCode = $("#libraryCode").text();
            if (libraryCode == null)
                libraryCode = "";

            // 微信id
            var weixinId = $("#weixinId").text();
            if (weixinId == "") {
                warn("weixinId不能为空。","");
                return;
            }

            var patron = "";
            var item = "";
            var cmdType = "";

            var ope = getOpe();
            var inputType = getInputType();

            if (ope == C_ope_borrow) {
                if (inputType == C_inputType_patron) {
                    cmdType = "loadPatron";
                    patron = getBarcode();
                    if (patron == null || patron == "") {
                        // 提示下，下一步继续获取条码
                        warnAndNext();
                        return;
                    }
                    // 设到内部的读者变量上
                    setPatron(patron);
                }
                else {
                    cmdType = "borrow";
                    patron = getPatron();//_patron; //从变量取值
                    item = getBarcode();
                    if (item == null || item == "") {
                        // 提示下，下一步继续获取条码
                        warnAndNext();
                        return;
                    }
                }
            }
            else if (ope == C_ope_return) {
                cmdType = "return";
                item = getBarcode();
                if (item == null || item == "") {
                    // 提示下，下一步继续获取条码
                    warnAndNext();
                    return;
                }
            }
            else if (ope == C_ope_searchItem) //查书
            {
                cmdType = C_ope_searchItem;
                item = getBarcode();
                if (item == null || item == "") {
                    // 提示下，下一步继续获取条码
                    warnAndNext();
                    return;
                }
            }

            //=============
            var verifyBarcode = $("#verifyBarcode").text();

            // 前端未打开校验条码开关
            if (verifyBarcode != "1")
            {
                // 直接处理命令
                addCmd2(weixinId, libId,libraryCode, cmdType, patron, item,0);
                return;
            }

            //if (inputType == C_inputType_patron) {
            //    // 直接处理命令
            //    addCmd2(weixinId, libId, cmdType, patron, item);
            //    return;
            //}

            //===============
            // 如果校验条码开关打开，则需要进行校验

            // 直接检查是否是读者二维码的情况
            if (inputType == C_inputType_item) {// 应该输入册条码时，校验
                if (item.length > 4 && item.substring(0, 4) == "PQR:") {
                    //还书时，直接提示，重新输入
                    if (ope == C_ope_return) {
                        warn("还书环境，应扫图书时，您扫了读者二维码，请重新扫入图书。", C_next_receiveBarcode, true);
                        return;
                    }

                    // 借书时，提示一下，然后加载新的读者。
                    if (ope == C_ope_borrow) {
                        //设到读者输入类型
                        setInputType(C_inputType_patron);
                        warn("借书环境，应扫图书时，您扫了读者二维码，将为您加载新读者。", C_next_addCmd, true);
                        return;
                    }
                }
            }

            // userId参数
            var userId = $("#userId").text();
            if (userId == null || userId == "") {
                warn("userId操作人不能不空。", "");
                return;
            }

            var barcode = item;
            if (inputType == C_inputType_patron)
            {
                barcode = patron;
            }

            //显示等待图层
            showLoading();
            // 调校验条码web api
            var url = "/api/ChargeCommandApi?libId=" + libId
            + "&libraryCode=" + encodeURIComponent(libraryCode)
            + "&userId=" + userId
            + "&barcode=" + encodeURIComponent(barcode)
            + "&needTransform=0";
            sendAjaxRequest(url, "POST", function (result) {
                // 关闭等待层
                hideLoading();

                //alert(result.errorCode);
                //alert(result.errorInfo);
                //  出错，直接关闭
                if (result.errorCode == -1) {
                    warn("校验条码出错：[" + result.errorInfo + "]\r\n 请在设置页面清除'校验输入的条码号'事项。");
                    return;
                }
                //  未配置，直接关闭
                if (result.errorCode == -2) {
                    warn("服务器没有配置条码号验证脚本，无法使用验证条码号功能。请在设置页面清除'校验输入的条码号'事项。", "");
                    return;
                }

                // 不是合法的条码号，请重新扫入
                if (result.errorCode == 0) {
                    warn(result.errorInfo, C_next_receiveBarcode, true);
                    return;
                }

                if (result.info != null && result.info != "") {
                    barcode = result.info;
                    setBarcode(barcode);

                    if (inputType == C_inputType_patron) {
                        param = barcode;
                    }
                    else {
                        item = barcode;
                    }
                }

                // 期待输入册条码，却扫入了读者证条码
                if (result.errorCode == 1 && inputType == C_inputType_item) {
                    if (ope == C_ope_return) {
                        warn("还书环境，应扫图书时，您扫了读者，请重新扫入图书。", C_next_receiveBarcode, true);
                        return;
                    }
                    else if (ope == C_ope_searchItem) {
                        warn("查书环境，应扫图书时，您扫了读者，请重新扫入图书。", C_next_receiveBarcode, true);
                        return;
                    }
                    else if (ope == C_ope_borrow) {
                        //setInputType(C_inputType_patron); //设到读者输入类型
                        //warn("应扫图书时，您扫了读者，将为您加载新读者。", C_next_addCmd, true);
                        cmdType = "loadPatron";
                        patron = getBarcode();
                        setPatron(patron); // 设到内部的读者变量上
                        addCmd2(weixinId, libId,libraryCode, cmdType, patron, item,0);
                        return;
                    }
                }

                // 读者时，有时输入姓名的。
                // 期待输入读者证条码，却扫入了册条码
                if (result.errorCode == 2 && inputType == C_inputType_patron) {
                    warn("借书环境，您扫入了册条码，请先扫入读者证。", C_next_receiveBarcode, true);
                    return;
                }


                //正常处理的情况
                addCmd2(weixinId, libId,libraryCode, cmdType, patron, item,0)


            }, function (xhq, textStatus, errorThrown) {
                // 关闭等待层
                hideLoading();
                alert(errorThrown);
            });


        }


        function addCmd2(weixinId, libId, libraryCode, cmdType, patron, item, needTransfrom)
        {
            ////==跑流程测试用==
            //if (cmdType == "loadPatron") {
            //    setInputType(C_inputType_item);
            //}
            //// 输出提示
            //warn("addCmd完成", C_next_dothing);
            //return;
            ////===

            //====

            //登录身份
            var userName = $("#userName").text();
            if (userName == null || userName == "") {
                warn("userName操作人不能不空。", "");
                return;
            }

            var isPatron = $("#isPatron").text();

            // userId参数
            var userId = $("#userId").text();
            if (userId == null || userId == "") {
                warn("userId操作人不能不空。", "");
                return;
            }

            //显示等待图层
            showLoading();

            //调 web api
            var url = "/api/ChargeCommandApi?weixinId=" + weixinId
                + "&libId=" + libId
                + "&libraryCode=" + encodeURIComponent(libraryCode)
                + "&needTransfrom=" + needTransfrom
            ;

            //alert(url);
            var data = {
                type: cmdType,
                patronInput: patron,
                itemInput: item,
                userName: userName,
                isPatron: isPatron,
                userId:userId
            };

            sendAjaxRequest(url, "POST", function (cmd) {

                // 关闭等待层
                hideLoading();

                if (cmd.state == -2) {
                    warn("未实现功能-姓名重复", C_next_receiveBarcode);
                    return;
                }
                if (cmd.state == -3) {
                    showSelectItem(cmd.itemList);
                    //warn("未实现功能-isbn", C_next_receiveBarcode);
                    return;
                }

                if (cmdType == "loadPatron") {
                    if (cmd.state == 1) {
                        // 设下面为 册条码输入框
                        setInputType(C_inputType_item);
                    }
                }

                // 加入操作历史
                viewCmd(cmd);

                //// 显示一下当前操作结果，结束下一轮
                //var html = "<div style='color:black;background-color:white'>" + cmd.cmdHtml + "</div>";
                //warn(html, C_next_dothing);

                var img = ""; var infoStyle = "";
                var isAutoClose = true;
                if (cmd.state == -1) {
                    // 当半自动方式，有错时，则不自动关闭窗口
                    img = "<img src='../img/error3.png' style='width:100px;height:100px' />";
                    isAutoClose = false;
                }
                else {
                    img = "<img src='../img/right1.png' style='width:100px;height:100px'  />";

                    // 当半自动方式，有警告时的，不自动关闭窗口
                    if (cmd.state == 1 && cmd.type != "loadPatron") {
                        infoStyle = ";background-color:yellow;color:black";
                        isAutoClose = false;
                    }
                }


                var html = "<table>"
                    + "<tr>"
                    + "<td>" + img + "</td>"
                    + "<td style='word-wrap:break-word;word-break:break-all;white-space:pre-wrap;" + infoStyle + "'>" + cmd.resultInfo + "</td>"
                    + "</tr>"
                + "</table>";


                warn(html, C_next_dothing, isAutoClose);

                // 更新summary
                window.setTimeout("fillPending()", 1);

            }, function (xhq, textStatus, errorThrown) {
                // 关闭等待层
                hideLoading();
                alert(errorThrown);
            },
            data);
        }
            


        function selectItemOK(obj) {

            if (obj == null || obj == "")
            {
                // 关闭图层
                layer.closeAll();


                warn("您放弃了选择册。",C_next_dothing);
            }
            else
            {
                var gray = $(obj).hasClass("item-gray");
                if (gray == true) {
                    alert("您点击的行不可用。");
                    return;
                }

                var id = $(obj).attr('id'); //item-C001
                var item = id.substring(5);
                //alert(item);



                // 设到条码变量上，以便后面使用
                setBarcode(item);

                // 关闭图层
                layer.closeAll();

                // 执行命令
                addCmd();


            }            
        }

        function showSelectItem(itemList) {
            var libId = $("#libId").text();
            var html = "";

            var func = "借";
            var ope = getOpe();
            if (ope == C_ope_return)
                func="还";


            html +="<div id='selItem' style='margin-top:10px;padding:4px;'>"
            + "<div style='margin-bottom:5px'>"
            +"<span style=''>"
            +"请点击要"+func+"的册</span>"
            +"&nbsp;&nbsp;"
            + "<span style='text-align:right'><a href='javascript:;' onclick='selectItemOK(null)'>取消</a></span>"
            +"</div>"
            +"<div id='biblio' style='font-size:14px'>";

            for (var i = 0; i < itemList.length; i++) {

                var clickevent = "onclick='selectItemOK(this)'";
                var img = "";//"<img src='../img/minus.png'>";

                var item = itemList[i];
                var myClass = "";
                if (item.isGray == true) {
                    myClass = " background-color: #eeeeee;color:#aaaaaa";
                    clickevent = "";
                }

                // 不关注的馆藏地
                if (item.isNotCareLoc == true)
                {
                    myClass = " background-color: #CCCCCC;color:#999999";
                    clickevent = "";
                    img = "<img src='../img/minus.png' width='16px' height='16px'>";
                }

                
                html += "<div class='mui-card item'  id='item-" + item.barcode + "'  "+clickevent+">"
                    + "<table style='" + myClass + "'>"
                        + "<tr>"
                            + "<td class='label'>册条码号</td>"
                            + "<td class='title'>" + item.pureBarcode + "</td>"
                        + "</tr>";

                
                if (item.state != null && item.state != "") {
                    html += "<tr>"
                        + "<td class='label'>状态</td>"
                        + "<td class='value'>" + item.state + "</td>"
                    + "</tr>";
                }

                
                if (item.volume != null && item.volume != "") {
                    html += "<tr>"
                                    + "<td class='label'>卷册</td>"
                                    + "<td class='value'>" + item.volume + "</td>"
                                + "</tr>";
                }
                
                html += "<tr>"
                                + "<td class='label'>馆藏地</td>"
                                + "<td class='value'>" + item.location + img+"</td>"
                            + "</tr>";

                //accessNo
               
                html += "<tr>"
                                + "<td class='label'>索取号</td>"
                                + "<td class='value'>" + item.accessNo + "</td>"
                            + "</tr>";


                html += "<tr>"
                    + "<td class='label'>价格</td>"
                    + "<td class='value'>" + item.price + "</td>"
                + "</tr>";

                html += "<tr>"
                    + "<td class='label'>在借情况</td>"
                    + "<td class='borrowInfo'>" + item.borrowInfo + "</td>"
                + "</tr>";
               

                html += "<tr>"
                    + "<td class='label'>书目摘要</td>"
                    + "<td class='value'>"
                    + "<div  class='summary pending' style='padding-bottom:4px'>"
                                       + "<label>bs-" + item.pureBarcode + "</label>"
                                       + "<img src='../img/wait2.gif' />"
                                       + "<span>" + libId + "</span>"
                                   + "</div>"
                    + "</td>"
                + "</tr>";
                
                html += "<tr>"
                    + "<td class='label'>册路径</td>"
                   + "<td class='value'>" + item.recPath + "</td>"
                + "</tr>";
                
                //收尾
                html +=  "</table>"
                + "</div>";
            }

            html += "</div>"
                    + "</div>";

            // ===弹层开始===
            var pageii = layer.open({
                type: 1
                , content: html
                //, anim: 'up'
                , style: 'overflow:scroll;position:fixed; left:0; top:0; width:100%; height:100%; border: none;' //background-color:black;color:white
                //, end: function (index) {
                //    //layer.close(index); //todo 是否需要关闭

                //    alert("走到图层end,选择的item为" + getBarcode());
                //    return;

                //    //addCmd();
                //}
            });
            //===弹层结束===

            // 更新summary
            window.setTimeout("fillPending()", 1);
        }


        function viewCmd(cmd) {
            //cmds
            var cmds = $("#cmds");

            // 加到前面
            //alert(cmd.cmdHtml);
            cmds.prepend(cmd.cmdHtml); //append(cmdHtml);//

            var cmdContainer = $("#cmdContainer");
            var display = $(cmdContainer).css("display");
            if (display == "none")
            {
                $(cmdContainer).css("display","block");
            }
        }

        //用于获取所有命令
        //这个似乎不需要冻结界面 todo
        function getAllCmd() {

            // 图书馆
            var libId = $("#libId").text();
            if (libId == "" || libId == null) {
                alert("您尚未选择图书馆。");
                return;
            }

            //显示等待图层
            showLoading();

            // 先删除老数据

            // 调web api
            var url = "/api/ChargeCommandApi?libId=" + libId;
            sendAjaxRequest(url, "GET", function (result) {

                // 关闭等待层
                hideLoading();

                //  出错
                if (result.errorCode == -1) {
                    alert(result.errorInfo);
                    return;
                }

                // 显示各个命令
                for (var i = 0; i < result.cmds.length; i++) {
                    var cmd = result.cmds[i];
                    viewCmd(cmd);
                }

                // 更新summary
                window.setTimeout("fillPending()", 1);


            }, function (xhq, textStatus, errorThrown) {
                // 关闭等待层
                hideLoading();
                alert(errorThrown);
            });
        }


        //==内部公共函数==================

        // 提示重新输入
        function warnAndNext() {
            // 提示，下一步继续获取条码
            var inputTypeDesc = getInputTypeDesc(true);
            warn(inputTypeDesc, C_next_receiveBarcode);
        }

        // 获取当前输入条码类型的 描述信息，因为2个地方用，所以提出作为函数
        function getInputTypeDesc(again) {
            var desc = "";

            var left = "";
            var againText = "";
            if (again == true) {
                againText = "重新";
            }

            var actionName = "";
            var from = getFrom();
            if (from == C_from_scan)
                actionName = "扫入";
            else
                actionName = "输入";

            var left = "<span style='font-size:14.8px'>请" + againText + actionName + "</span>";

            var inputType = getInputType();
            if (inputType == C_inputType_patron) {
                desc = left+ " 读者...";
            }
            else if (inputType == C_inputType_item) {
                var func = "";
                var ope = getOpe();
                if (ope == C_ope_borrow)
                    func = "要借的";
                else if (ope==C_ope_return)
                    func = "要还的";
                else if (ope == C_ope_searchItem)
                {
                    func="要查的";
                }

                desc = left+ " "+func+"书...";
            }
            else {
                desc = left + " 不知道！！！";
            }
            return desc;
        }

        // 得到操作类型
        function getOpe() {
            return $("#_charge_operation").val();
        }
        // 设置操作类型
        function setOpe(value) {
            $("#_charge_operation").val(value);

            if (value == C_ope_borrow) {

                // 如果是当前帐户是读者，不需要扫入证条码，直接扫入册条码
                var _patronBarcode = $("#_patronBarcode").html();
                if (_patronBarcode != undefined && _patronBarcode != null && _patronBarcode !="")
                {
                    //alert("["+_patronBarcode+"]");
                    setPatron(_patronBarcode);
                    setInputType(C_inputType_item);
                }
                else {
                    setInputType(C_inputType_patron);
                }
            }
            else {
                setInputType(C_inputType_item);
            }

        }

        // 得到读者证条码
        function getPatron() {
            return $("#_patron").val();
        }
        // 设置读者证条码
        function setPatron(value) {
            return $("#_patron").val(value);
        }

        // 得到条码
        function getBarcode() {

            var barcode = $("#_barcode").val();
            
            return barcode.toUpperCase();//20171207，将输入的内容统一转成大写
        }
        // 设置条码
        function setBarcode(value) {
            return $("#_barcode").val(value);
        }

        // 得到输入类型,1表示读者证 2表示册条码
        function getInputType() {
            return $("#_charge_inputType").val();
        }
        // 设置输入类型
        function setInputType(value) {
            return $("#_charge_inputType").val(value);
        }

        // 得到当前场景
        function getScene() {
            var text = "";

            var ope = getOpe();
            // 根据借 还 做操作
            if (ope == C_ope_borrow) {
                text = "借书环境";
            }
            else if (ope == C_ope_return) {
                text = "还书环境";
            }
            else if (ope == C_ope_searchItem) {
                text = "查书环境";
            }
            else {
                text = "不清楚的环境";
            }

            return text;
        }

        // 当输入框方式时，点击确认按钮
        function ok() {

            //取出在界面textbox输入的条码
            var barcode = $("#mybarcode").val();
            //alert(barcode);
            if (barcode == null || barcode == "") {
                alert("请输入");
                return;
            }

            // 设到条码变量上，以便后面使用
            setBarcode(barcode);

            // 关闭图层
            layer.closeAll();
        }

        // 当输入框方式时，在textbox点击回车事件
        function enter(event) {
            if (event.keyCode == "13") {
                ok();
            }
        }

        // 显示主页面
        function showMainPage() {
            //$("#mybody").css("background-color", "");
            $("#mypage").css("display", "block");
        }

        // 隐藏主页面
        function hideMainPage() {

            if ($("#mypage").css("display") == "none")
                return;

            $("#mybody").css("background-color", "white");
            $("#mypage").css("display", "none");
        }



        // 获取输入方式
        function getFrom() {
            return $("#from").val();
        }

        //设置输入方式
        function setFrom(value) {
            return $("#from").val(value);
        }

        function getControlType() {
            return $("#controlType").val();
        }


        //function showBackground() {

        //    var background = $("#my-background");

        //    // 设背景高度
        //    var docHeight = $(document).height();
        //    $(background).css("height", docHeight);

        //    background.show();
        //}

        //function hideBackground() {
        //    var bg = $("#my-background");
        //    bg.hide();
        //}

        //====================
    </script>
}

@section style {

    <link href="@Url.Content("~/Content/biblio.css?a=1")" rel="stylesheet">
    <link href="@Url.Content("~/Content/patron.css?a=1")" rel="stylesheet">
    <style>
        TABLE.chargeform {
            width: 100%;
        }

            TABLE.chargeform TD {
                /*height:62px;*/
            }


                TABLE.chargeform TD INPUT {
                    height: 50px;
                    font-size: 28px;
                    border-radius: 3px;
                    margin-bottom: 0px;
                }

        .operationLink {
            cursor: pointer;
            font-size: 16pt;
            width: 200px;
            color: #007aff;
        }

        .operationName {
            font-size: 40pt;
            cursor: pointer;
        }

        .item-gray {
            color: #cccccc;
        }

        .middle {
            display: block;
            position: absolute;
            top: 100px;
            padding:10px;
            padding-right:15px;
            width:100%;

            z-index: 2001;
            text-align: left;
            vertical-align: top;

            /*background-color:green;*/
        }

       /*==================================*/
        /*整个命令块*/
        DIV.cmd {
            margin: 14px 0px 0px;
            padding: 2px;
        }

        /*一条一条的册table*/
        DIV.cmd TABLE {
            text-align: left;
            background-color: white;
            width: 100%;
            margin-top: 0px;
        }

        /*册td*/
        DIV.cmd TABLE TR TD {
            border-width: 0px;
            padding: 1px;
            vertical-align: top;

            word-wrap:break-word;word-break:break-all;white-space:pre-wrap
        }

        /*册左侧标题td*/
        DIV.cmd TABLE TR TD.label {
            width: 75px;
            max-width: 75px;
            min-width:75px;
            background-color: #ffffff;
            color: #999999;
            padding-right: 2px;
            text-align: right;


        }

        /*册右值数据td*/
        DIV.cmd TABLE TR TD.value {
            padding-left: 5px;
        }

        DIV.cmd TABLE TR TD.patronBarcode {
            font-weight:bold;
            text-align: right;

        }

        DIV.cmd TABLE TR TD.time {
            color:gray;
        }

        DIV.cmd TABLE TR TD.itemBarcode {
            font-weight:bold;
            text-align: right;
        }

        DIV.cmd TABLE TR TD .name {
            
            font-size:16px;
            font-weight:bold;
        }

        DIV.cmd TABLE TR TD .department {
            color:gray;
        }

        DIV.cmd TABLE TR TD .error {
            padding-left: 5px;
            color:red;
        }

        DIV.cmd TABLE TR TD.success {
            padding-left: 5px;
            color:darkgreen;
        }

        DIV.cmd TABLE TR TD.warn {
            padding-left: 5px;
            background-color:yellow;
        }
        /*===========*/

/*===命令显示新格式=======*/
       DIV.cmd  .line{
            padding-left:5px;
        }

        DIV.cmd .line .success {
            color:darkgreen;
        }

        DIV.cmd .line .error {
            color:red;
        }

        DIV.cmd .line  .warn {
            padding-left: 5px;
            background-color:yellow;
        }

       DIV.cmd .line  .patronName{
            font-size:16px;
            font-weight:bold;
        }

        DIV.cmd .line .patronBarcode{
            color:gray;
        }

        DIV.cmd .line .department{
            color:gray;
        }

        DIV.cmd .line  .itemBarcode{
            font-size:14px;
            font-weight:bold;
        }

        DIV.cmd .line  .summary{
                        padding-left: 5px;

            color:gray;
        }

        DIV.cmd .line .time {
            color:#cccccc;            
        }

           .split {
               margin-top:10px;
               height:1px;
                width:100%;
                
                border-top:3px dotted #CCCC33;
                
            }


        /*===========*/
    </style>
}

<!--<div id="my-background" style="display: none; background-color:black"></div>-->


<span id="weixinId" style="display:none">@ViewBag.weixinId</span>
<span id="libId" style="display:none">@ViewBag.LibId</span>
<span id="libraryCode" style="display:none">@ViewBag.LibraryCode</span>
<span id="userName" style="display:none">@ViewBag.userName</span>
<span id="isPatron" style="display:none">@ViewBag.isPatron</span>

<span id="verifyBarcode" style="display:none">@ViewBag.verifyBarcode</span>
<span id="userId" style="display:none">@ViewBag.userId</span>

<input id="_charge_operation" type="hidden" value="">
<input id="_charge_inputType" type="hidden" value="">
<input id="_patron" type="hidden" value="">
<input id="_barcode" type="hidden" value="">

<span id="_patronBarcode" style="display:none">@ViewBag.patronBarcode</span>


@if (String.IsNullOrEmpty(ViewBag.Error) == false)
{
    <div class="mui-content-padded">
        <span class="errorinfo">
            @Html.Raw(ViewBag.Error)
        </span>
    </div>
}
else
{

    if (ViewBag.RedirectInfo != null && ViewBag.RedirectInfo != "")
    {
        @Html.Raw(ViewBag.RedirectInfo);
    }
    else
    {
        <div id="mypage"  >
            <div style="padding:10px;padding-bottom:0px;text-align:right"><span style="color:#cccccc">帐户&nbsp;</span>@ViewBag.userName<span style="color:#cccccc">&nbsp;关注馆藏&nbsp;</span>@ViewBag.Location<span style="color:#cccccc">&nbsp;</span><a href="~/Patron/Setting">设置</a></div>
            <div style="padding:10px;padding-bottom:0px;">
                <button class="mui-btn mui-btn-block" onclick="start('borrow')" @ViewBag.canBorrow >开始借书</button>
                <button class="mui-btn mui-btn-block" onclick="start('return')" @ViewBag.canReturn >开始还书</button>
                <button class="mui-btn mui-btn-block" onclick="start('searchItem')">开始查书</button>

            </div>
            <div style="background-color:white;margin-left:10px;margin-right:10px;margin-top:0px">
                <div class="mui-input-row " style=" background-image:url('../img/arrowright.png');background-position:right;background-repeat:no-repeat">
                    <label style="color:#cccccc">扫码方式</label>
                    <select id="from" style="background-color:transparent" >
                        <option value="1">摄像头</option>
                        <option value="2">键盘输入</option>
                    </select>
                </div>
                <div class="mui-input-row " style=" background-image:url('../img/arrowright.png');background-position:right;background-repeat:no-repeat">
                    <label style="color:#cccccc">流程风格</label>
                    <select id="controlType" style="background-color:transparent" >
                        <option value="manual">手动</option>
                        <option value="manualAuto" selected="">有条件的自动</option>
                        <option value="auto">完全自动</option>
                    </select>
                </div>
               </div>
            
                <div id="cmdContainer" class="mui-content-padded" style="display:none">
                    <h4><span style="color:#cccccc">操作历史</span></h4>
                    <div id="cmds"></div>
                </div>
            </div>
    }
}
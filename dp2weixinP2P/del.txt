2022/10/20 原来解析item的代码，现在提成一个函数

                XmlDocument dom = new XmlDocument();
                dom.LoadXml(xml);

                string strBarcode = DomUtil.GetElementText(dom.DocumentElement, "barcode");
                string strRefID = DomUtil.GetElementText(dom.DocumentElement, "refID");
                item.refID = strRefID;
                item.pureBarcode = strBarcode;

                // 册条码号,如果册条码为空，则写为@refID：refid
                string strViewBarcode = "";
                if (string.IsNullOrEmpty(strBarcode) == false)
                    strViewBarcode = strBarcode;
                else
                    strViewBarcode = "@refID:" + strRefID;  //"@refID:" 
                item.barcode = strViewBarcode;


                //状态
                string strState = DomUtil.GetElementText(dom.DocumentElement, "state");

                // 是否是成员册
                bool bMember = false;
                XmlNode nodeBindingParent = dom.DocumentElement.SelectSingleNode("binding/bindingParent");
                if (nodeBindingParent != null)
                {
                    bMember = true;
                    StringUtil.SetInList(ref strState, "已装入合订册", true);

                    string parentRefID = DomUtil.GetAttr(nodeBindingParent, "refID");
                    item.parentInfo = "@refID:" + parentRefID;
                }
                item.state = strState;

                // 是否可用，加工中 或者  成员册不能使用，要划删除线等
                bool disable = false;
                if (StringUtil.IsInList("加工中", item.state) == true
                    || bMember == true)
                {
                    disable = true;
                }
                item.disable = disable;


                //卷册
                item.volume = DomUtil.GetElementText(dom.DocumentElement, "volume");


                // 馆藏地
                item.location = DomUtil.GetElementText(dom.DocumentElement, "location");
                // 检查该馆藏地的册记录是否可以显示出现
                if (string.IsNullOrEmpty(lib.NoViewLocation) == false)
                {
                    if (lib.NoViewLocation.IndexOf(item.location) != -1)
                    {
                        if (string.IsNullOrEmpty(patronBarcode) == false
                            || activeItem.userName == WxUserDatabase.C_Public)
                        {
                            // 读者身份的话，直接不显示
                            continue;
                        }
                        else
                        {
                            // 馆员身份，灰色显示
                            item.isGray = true;
                        }
                    }
                }

                // 2022/6/20 过滤内部册
                if (StringUtil.IsInList("内部", item.state) == true)
                {
                    // 读者帐号或者public帐户不显示
                    if (string.IsNullOrEmpty(patronBarcode) == false
                        || activeItem.userName == WxUserDatabase.C_Public)
                    {
                        // 不显示
                        continue;
                    }
                    else
                    {
                        // 馆员身份，灰色显示
                        item.isGray = true;
                    }
                }


                // 当前位置
                item.currentLocation = DomUtil.GetElementText(dom.DocumentElement, "currentLocation");
                // 架号
                item.shelfNo = DomUtil.GetElementText(dom.DocumentElement, "shelfNo");

                // 索引号
                item.accessNo = DomUtil.GetElementText(dom.DocumentElement, "accessNo");
                // 出版日期
                item.publishTime = DomUtil.GetElementText(dom.DocumentElement, "publishTime");
                // 价格
                item.price = DomUtil.GetElementText(dom.DocumentElement, "price");
                // 注释
                item.comment = DomUtil.GetElementText(dom.DocumentElement, "comment");

                // 借阅情况
                /*
                 <borrower>R00001</borrower>
<borrowerReaderType>教职工</borrowerReaderType>
<borrowerRecPath>读者/1</borrowerRecPath>
<borrowDate>Sun, 17 Apr 2016 23:57:40 +0800</borrowDate>
<borrowPeriod>31day</borrowPeriod>
<returningDate>Wed, 18 May 2016 12:00:00 +0800</returningDate>
                 */
                string strBorrower1 = DomUtil.GetElementText(dom.DocumentElement, "borrower");
                string borrowDate = DateTimeUtil.ToLocalTime(DomUtil.GetElementText(dom.DocumentElement,
"borrowDate"), "yyyy/MM/dd");
                string borrowPeriod = DomUtil.GetElementText(dom.DocumentElement, "borrowPeriod");


                borrowPeriod = GetDisplayTimePeriodStringEx(borrowPeriod);
                item.borrower = strBorrower1;
                item.borrowDate = borrowDate;
                item.borrowPeriod = borrowPeriod;

                // 2022/8/9 增加一个还书日期
                string returningDate = DateTimeUtil.ToLocalTime(DomUtil.GetElementText(dom.DocumentElement,
"returningDate"), "yyyy/MM/dd"); //DomUtil.GetElementText(dom.DocumentElement, "returningDate");
                item.returningDate = returningDate;



                if (string.IsNullOrEmpty(cmdType) == false)//(isPatron1 == false)
                {
                    if (cmdType == "borrow")
                    {
                        if (string.IsNullOrEmpty(item.borrower) == false
                            || String.IsNullOrEmpty(strState) == false) //状态有值是也不允许借阅
                        {
                            item.isGray = true;
                        }
                    }
                    else if (cmdType == "return")
                    {
                        // 没有在借的册需要显示为灰色
                        if (string.IsNullOrEmpty(item.borrower) == true)
                            item.isGray = true;
                    }
                }



                // 成员册 不显示“在借情况”和“预约信息”
                if (bMember == false)
                {
                    // 在借信息
                    string strBorrowInfo = "";
                    if (string.IsNullOrEmpty(item.borrower) == true)// 在架的情况
                    {
                        strBorrowInfo = "在架";
                    }
                    else // 册记录中存在借阅者，被借出的情况
                    {
                        // 当前帐户就是借阅者本人
                        if (patronBarcode == item.borrower) 
                        {
                            // 2016-8-16 无册条码的情况，用refid:id代替，但在前端界面要写为refID-，否则js没法续约
                            string tempBarcode = item.barcode;
                            if (tempBarcode.Contains("@refID:") == true)
                                tempBarcode = tempBarcode.Replace("@refID:", "refID-");

                            strBorrowInfo =
                                "<table style='width:100%;border:0px'>"
                                + "<tr>"
                                + "<td class='info' style='border:0px'>借阅者：" + item.borrower + "<br/>"
                                + "借阅日期：" + item.borrowDate + "<br/>"
                                + "借期：" + item.borrowPeriod + "<br/>"
                                + "还书日期：" + item.returningDate 
                                + "</td>"
                                + "<td class='btn' style='border:0px'>"
                                + "<button class='mui-btn  mui-btn-default'  onclick=\"renew('" + tempBarcode + "')\">续借</button>"
                                + "</td>"
                                + "</tr>"
                                + "<tr><td colspan='2'><div id='renewInfo-" + tempBarcode + "'/></td></tr>"
                                + "</table>";

                            //reservationInfo = "<div class='remark'>该册目前是您在借中，不能预约。</div>";
                            //bCanReservation = false;
                        }
                        else 
                        {
                            //2022/8/5改进，接口返回的信息自然会脱敏，我爱图书馆这边原样显示返回的值即可
                            strBorrowInfo = "借阅者：" + item.borrower + "<br/>" //"借阅者：***<br/>"
                                + "借阅日期：" + item.borrowDate + "<br/>"
                                + "借期：" + item.borrowPeriod + "<br/>"
                                + "还书日期：" + item.returningDate;

                            //bCanReservation = true;
                        }
                    }
                    // 设置在借还是在架信息
                    item.borrowInfo = strBorrowInfo;


                    //=================
                    // 预约信息
                    string reservationInfo = "";
                    bool bCanReservation = true;  // 默认是可以预约的
                    if (lib.ReserveScope == LibDatabase.C_ReserveScope_No)
                    {
                        reservationInfo = "本图书馆不支持预约图书。";
                        bCanReservation = false;
                    }
                    else if (lib.ReserveScope == LibDatabase.C_ReserveScope_All)
                    {
                        if (string.IsNullOrEmpty(patronBarcode) == false && item.borrower == patronBarcode)
                        {
                            reservationInfo = "该册目前是您在借中，不能预约。";
                            bCanReservation = false;
                        }
                    }
                    else if (lib.ReserveScope == LibDatabase.C_ReserveScope_OnlyBorrow)
                    {
                        if (string.IsNullOrEmpty(item.borrower) == true)
                        {
                            reservationInfo = "本图书馆不支持在架图书预约。";
                            bCanReservation = false;
                        }
                        else
                        {
                            if (string.IsNullOrEmpty(patronBarcode) == false && item.borrower == patronBarcode)
                            {
                                reservationInfo = "该册目前是您在借中，不能预约。";
                                bCanReservation = false;
                            }
                        }
                    }
                    else if (lib.ReserveScope == LibDatabase.C_ReserveScope_OnlyOnshelf)
                    {
                        if (string.IsNullOrEmpty(item.borrower) == false)
                        {
                            reservationInfo = "本图书馆不支持外借图书预约。";
                            bCanReservation = false;
                        }
                    }

                    // 检查该馆藏地是否预约
                    if (string.IsNullOrEmpty(lib.NoReserveLocation) == false)
                    {
                        if (lib.NoReserveLocation.IndexOf(item.location) != -1)
                        {
                            reservationInfo = "本馆藏地不支持预约。";
                            bCanReservation = false;
                        }
                    }

                    // 如果不是读者帐户，提示不是读者帐号，不能预约
                    // 如果前面已经判断是不能预约，就不走进这里，优先用前面的提示
                    if (bCanReservation == true && string.IsNullOrEmpty(patronBarcode) == true)
                    {
                        reservationInfo = "<span class='remark'>您当前帐户不是读者账号，不能预约图书，"
                            + "点击<a href='javascript:void(0)' onclick='gotoUrl(\"/Account/Index?returnUrl="
                            + HttpUtility.UrlEncode("/Biblio/Index") + "\")'>这里</a>绑定读者帐号。</span>";
                        bCanReservation = false;
                    }

                    if (disable == true)
                    {
                        reservationInfo = "图书状态不符合预约要求。";
                        bCanReservation = false;
                    }

                    // 预约信息
                    if (bCanReservation == true)
                    {
                        // 得到当前读者已经预约的信息
                        List<ReservationInfo> reserList = null;
                        if (string.IsNullOrEmpty(patronBarcode) == false)// patronBarcode != null && patronBarcode != "")
                        {
                            reservationInfo = "";
                            int nRet = this.GetPatronReservation(lib.id,
                                loginInfo,
                                patronBarcode,
                                out reserList,
                                out strError);
                            if (nRet == -1 || nRet == 0)
                                goto ERROR1;
                        }
                        string state = this.getReservationState(reserList, item.barcode);
                        reservationInfo = getReservationHtml(state, item.barcode, false, true);
                    }
                    // 设置预约信息
                    item.reservationInfo = reservationInfo;
                    
                }
===

2022/10/13 简编界面

        // 简编界面
        public ActionResult BiblioEdit(string code, string state,string biblioPath)
        {
            string strError = "";
            int nRet = 0;

            // 获取当前sessionInfo，里面有选择的图书馆和帐号等信息
            // -1 出错
            // 0 成功
            nRet = this.GetSessionInfo(code, state,
                out SessionInfo sessionInfo,
                out strError);
            if (nRet == -1)
            {
                ViewBag.Error = strError;
                return View();
            }

            // 当前帐号不存在，尚未选择图书馆
            if (sessionInfo.ActiveUser == null)
            {
                ViewBag.RedirectInfo = dp2WeiXinService.GetSelLibLink(state, "/Biblio/BiblioEdit");
                return View();
            }

            if (sessionInfo.ActiveUser != null
    && sessionInfo.ActiveUser.type == WxUserDatabase.C_Type_Worker
    && sessionInfo.ActiveUser.userName != WxUserDatabase.C_Public)
            {
                ViewBag.Worker = sessionInfo.ActiveUser.userName;
            }

            // 可编辑字段配置
            string biblioDbName = "";
            string fieldMap = dp2WeiXinService.Instance.GetFieldsMap(sessionInfo.ActiveUser.libId,
                sessionInfo.ActiveUser.bindLibraryCode,
                out biblioDbName);
            List<FieldItem> fieldList = new List<FieldItem>();
            try
            {
                fieldList = MarcHelper.ParseFieldMap(fieldMap);
            }
            catch (Exception ex)
            {
                @ViewData["marcField"] = "解析marc字段配置规则出错：" + ex.Message;
                return View();

            }
            // 新增时，必须要在配置文件中配置好目标数据库
            if (string.IsNullOrEmpty(biblioPath) == true)
            {
                if (string.IsNullOrEmpty(biblioDbName) == true)
                {
                    ViewBag.Error = "尚未配置目标书目库，无法新增书目，请联系管理员。";
                    return View();
                }
                biblioPath = biblioDbName + "/?";
            }

            string html = "";



            html += @"<div class='mui-input-row '>"
+ "<label  style='color:#cccccc'>书目路径</label>"
+ "<input id='biblioPath' disabled type='text' class=' mui-input mui-input-clear' style='color:#bbbbbb'  value='"+biblioPath+"'/>"
+ "</div>";


            /*
            foreach (FieldItem field in fieldList)
            {
                html += "<tr>"
        + "<td class='label'>" + field.Caption + "</td>"
        + "<td>"
            + "<input  class='_field mui-input mui-input-clear'  id='" + field.Caption + "|" + field.Field + field.Subfield + "' type='text' value='" + field.Value + "'>"
        + "</td>"
    + "</tr>";
            }

            if (string.IsNullOrEmpty(biblioPath) == true)
            {
                html += "<tr>"
    + "<td class='label'>目标数据库</td>"
    + "<td>"
        + "<div style='border:1px solid #cccccc;'>"
            + "<select id='_selDbName'>"
                + "<option value='中文图书' selected >中文图书</option>"
                + "<option value='测试库'>测试库</option>"
            + "</select>"
        + "</div>"
    + "</td>"
+ "</tr>";
            }

            // 操作按钮
            html += "<tr>"
    + "<td colspan='2'>"
        + "<button class='mui-btn mui-btn-primary' onclick=\"saveField()\">保存</button>&nbsp;&nbsp;"
        + "<button class='mui-btn mui-btn-default' onclick=\"cancelEdit()\">取消</button>"
    + "</td>"
+ "</tr>";

            html = "<table id='_marcEditor'>"
                + html
                + "</table>";
            */

            //

            foreach (FieldItem field in fieldList)
            {
                string id = field.Caption + "|" + field.Field +"$"+ field.Subfield;
                html += @"<div class='mui-input-row '>"
                +"<label  style='color:#cccccc'>"+field.Caption+"</label>"
                +"<input id='"+id+ "' type='text' class='_field mui-input mui-input-clear'>"
            + "</div>";
            }

            // 为了简单起见，新增时目标数据库只有一个
            /*
            if (string.IsNullOrEmpty(biblioPath) == true)
            {
                html += @" <div class='mui-input-row selArrowRightContainer'>
                <label  style='color:#cccccc'>目标数据库</label>
                <select id='_selDbName'  class='selArrowRight'>
                    <option value=''>请选择</option>'
                    <option value='中文图书' selected >中文图书</option>
                    <option value='测试中文图书1'>测试中文图书1</option>
                </select>
            </div>";
            }
            */

            // 操作按钮
            html += @"        <div class='mui-content-padded'>
            <table style='width:100%'>
                <tr>
                    <td>
                        <button class='mui-btn mui-btn-block mui-btn-default' onclick='saveBiblio()'>保存</button>
                    </td>
                    <td width='10px'>&nbsp;</td>
                    <td>
                        <button class='mui-btn mui-btn-block mui-btn-default' onclick='cancelEdit()'>取消</button>
                    </td>
                </tr>
            </table>
        </div>";

            html = "<div class='mui-input-group' id='_marcEditor'>"
                + html
                + "</div>";


            @ViewData["marcField"] = html;
            ViewBag.BiblioPath = biblioPath;

            return View();
        }

===

            <div class="mui-content-padded"><span style="@ViewBag.subLibGray">馆藏限定范围</span><span style="color:#cccccc">（工作人员 或 有流通权限的读者 有效） @ViewBag.accountInfo</span> </div>

                // 成员册 不显示“在借情况”和“预约信息”
                if (bMember == false)
                {
                    string strBorrowInfo = "在架";
                    bool bOwnBorrow = false;
                    
                    // 被借出的情况
                    if (string.IsNullOrEmpty(item.borrower) == false)
                    {
                        // 馆的备注信息如果配置了ReserveOnshelf，则表示仅支持在架预约，外借的图不支持预约。2020/2/14 renyh
                        if (string.IsNullOrEmpty(lib.comment)==false
                            && lib.comment.IndexOf("ReserveOnshelf") != -1) 
                        {
                            bCanReservation = false;
                        }



                        // 工作人员的情况
                        if (loginInfo.UserType != "patron" 
                            && loginInfo.UserName!= WxUserDatabase.C_Public)
                        {
                            strBorrowInfo = "借阅者：" + item.borrower + "<br/>"
                          + "借阅时间：" + item.borrowDate + "<br/>"
                          + "借期：" + item.borrowPeriod;
                        }
                        else if (patronBarcode != item.borrower 
                            || String.IsNullOrEmpty(patronBarcode) == true) // 非本人的情况
                        {
                            strBorrowInfo = "借阅者：***<br/>"
                            + "借阅时间：" + item.borrowDate + "<br/>"
                            + "借期：" + item.borrowPeriod;
                        }
                        else
                        {
                            // 2016-8-16 修改isbn不能预约的情况
                            string tempBarcode = item.barcode;
                            if (tempBarcode.Contains("@refID:") == true)
                                tempBarcode = tempBarcode.Replace("@refID:", "refID-");

                            strBorrowInfo =
                                "<table style='width:100%;border:0px'>"
                                + "<tr>"
                                    + "<td class='info' style='border:0px'>借阅者：" + item.borrower + "<br/>"
                                                                + "借阅时间：" + item.borrowDate + "<br/>"
                                                                + "借期：" + item.borrowPeriod
                                        + "</td>"
                                    + "<td class='btn' style='border:0px'>";

                            if (String.IsNullOrEmpty(patronBarcode) == false)//isPatron == true) // 只有读者身份，才有预约按钮
                            {
                                strBorrowInfo += "<button class='mui-btn  mui-btn-default'  onclick=\"renew('" + tempBarcode + "')\">续借</button>";
                            }
                            strBorrowInfo += "</td>"
                                + "</tr>"
                                + "<tr><td colspan='2'><div id='renewInfo-" + tempBarcode + "'/></td></tr>"
                                + "</table>";

                            // 此时不能预约
                            bOwnBorrow = true;
                            reservationInfo = "<div class='remark'>该册目前是您在借中，不能预约。</div>";
                        }
                    }
                    item.borrowInfo = strBorrowInfo;

                    // 预约信息
                    if (bCanReservation == true && bOwnBorrow == false)
                    {
                        bool showReser = true;
                        if (disable == true || String.IsNullOrEmpty(patronBarcode)==true)//isPatron == false)
                            showReser = false;

                        string state = this.getReservationState(reserList, item.barcode);
                        reservationInfo = getReservationHtml(state, item.barcode, false, showReser);
                    }
                    item.reservationInfo = reservationInfo;
                }

===
        // 设置微信用户当前图书馆
        [HttpPost]
        public ApiResult SetLibId(string weixinId, string libId)
        {
            ApiResult result = new ApiResult();
            string error = "";

            string temp = libId;
            string bindLibraryCode = "";
            int nIndex = libId.IndexOf("~");
            if (nIndex > 0)
            {
                libId = temp.Substring(0, nIndex);
                bindLibraryCode = temp.Substring(nIndex + 1);
            }

            if (HttpContext.Current.Session[WeiXinConst.C_Session_sessioninfo] == null)
            {
                error = "session失效。";
                goto ERROR1;
            }
            SessionInfo sessionInfo = (SessionInfo)HttpContext.Current.Session[WeiXinConst.C_Session_sessioninfo];
            if (sessionInfo == null)
            {
                error = "session失效2。";
                goto ERROR1;
            }

            //如果选择的图书馆就是是当前活动帐户对应的图书馆，则不用处理
            if (sessionInfo.ActiveUser != null
                && sessionInfo.ActiveUser.libId == libId
                && sessionInfo.ActiveUser.bindLibraryCode == bindLibraryCode)
            {
                return result;
            }

            //// 如果当前活动帐户是一个临时public帐户
            //if (sessionInfo.ActiveUser != null
            //    && sessionInfo.ActiveUser.userName == WxUserDatabase.C_Public)
            //{
            //    //
            
            //}



            // 如果微信用户已经绑定了该图书馆的帐户，则设这个馆第一个帐户为活动帐户
            WxUserItem user = null;
            List<WxUserItem> list = WxUserDatabase.Current.Get(weixinId, libId, -1); //注意这里不区分分馆,在下面还是要看分馆
            if (list.Count > 0)
            {
                List<WxUserItem> foundList = new List<WxUserItem>();
                foreach (WxUserItem u in list)
                {
                    if (u.bindLibraryCode == bindLibraryCode)
                    {
                        user = u;
                        break;
                    }
                }
            }
            if (user == null) // 绑public身份创建一个帐号
            {
                // 先看看有没有public的,有的话，用绑定的实际帐号替换
                //注意这里不过滤图书馆，就是说临时选择的图书馆，如果未绑定正式帐户，则会被新选择的图书馆public帐户代替
                List<WxUserItem> publicList = WxUserDatabase.Current.GetWorkers(weixinId, "", WxUserDatabase.C_Public);
                if (publicList.Count > 0)
                {
                    user = publicList[0];
                    if (publicList.Count > 1)
                    {
                        dp2WeiXinService.Instance.WriteErrorLog("!!!异常：出现" + publicList.Count + "个public帐户?应该只有一个，把多余的帐户删除");
                        for (int i = 1; i < publicList.Count; i++)
                        {
                            WxUserDatabase.Current.SimpleDelete(publicList[i].id);
                        }
                    }

                    user.libId = libId;
                    Library lib = dp2WeiXinService.Instance.LibManager.GetLibrary(libId);
                    if (lib == null)
                    {
                        error = "未找到id=" + libId + "对应的图书馆";
                        goto ERROR1;
                    }
                    user.libName = lib.Entity.libName;
                    user.bindLibraryCode = bindLibraryCode;
                    if (string.IsNullOrEmpty(user.bindLibraryCode) == false)
                        user.libName = user.bindLibraryCode;

                    user.libraryCode = "";
                    WxUserDatabase.Current.Update(user);
                }
                else
                {
                    try
                    {
                        // 创建一个public帐号
                        user = WxUserDatabase.Current.CreatePublic(weixinId, libId, bindLibraryCode);
                    }
                    catch (Exception ex)
                    {
                        error = ex.Message;
                        goto ERROR1;
                    }
                }
            }

            // 设为当前帐户
            WxUserDatabase.Current.SetActivePatron1(user.weixinId, user.id);

            // 初始化sesson
            int nRet = sessionInfo.GetActiveUser(user.weixinId, out error);
            if (nRet == -1)
                goto ERROR1;

            //===================

            return result;

            ERROR1:
            result.errorCode = -1;
            result.errorInfo = error;
            return result;
        }


===

// 管理的分馆
            string[] libraryList = sessionInfo.ActiveUser.libraryCode.Split(new[] { ',' });

            // 读者类别
            string types = sessionInfo.ReaderTypes;
            string typesHtml = "";
            if (String.IsNullOrEmpty(types) == false)
            {
                string[] typeList = types.Split(new char[] { ',' });
                foreach (string type in typeList)
                {
                    // 如果这个类型的分馆 是当前帐户可用的分馆，才列出来
                    if (sessionInfo.ActiveUser.libraryCode != "")
                    {
                        int nIndex = type.LastIndexOf("}");
                        if (nIndex > 0)
                        {
                            string left = type.Substring(0, nIndex);
                            nIndex = left.IndexOf("{");
                            if (nIndex != -1)
                            {
                                left = left.Substring(nIndex + 1);

                                if (libraryList.Contains(left) == true)
                                {
                                    string sel = "";
                                    if (patron.readerType == left)
                                        sel = " selected ";


                                    typesHtml += "<option value='" + type + "' "+ sel +">" + type + "</option>";
                                }
                            }
                        }
                    }
                    else
                    {
                        string sel = "";
                        if (patron.readerType == type)
                            sel = " selected ";

                        typesHtml += "<option value='" + type + "' "+sel+">" + type + "</option>";
                    }
                }
            }
            typesHtml = "<select id='selReaderType' name='selReaderType' class='selArrowRight'>"
                    + "<option value=''>请选择</option>"
                    + typesHtml
                    + "</select>";
            ViewBag.readerTypeHtml = typesHtml;
                // 成员册 不显示“在借情况”和“预约信息”
                if (bMember == false)
                {
                    string strBorrowInfo = "在架";
                    bool bOwnBorrow = false;
                    
                    // 被借出的情况
                    if (string.IsNullOrEmpty(item.borrower) == false)
                    {
                        // 馆的备注信息如果配置了ReserveOnshelf，则表示仅支持在架预约，外借的图不支持预约。2020/2/14 renyh
                        if (string.IsNullOrEmpty(lib.comment)==false
                            && lib.comment.IndexOf("ReserveOnshelf") != -1) 
                        {
                            bCanReservation = false;
                        }



                        // 工作人员的情况
                        if (loginInfo.UserType != "patron" 
                            && loginInfo.UserName!= WxUserDatabase.C_Public)
                        {
                            strBorrowInfo = "借阅者：" + item.borrower + "<br/>"
                          + "借阅时间：" + item.borrowDate + "<br/>"
                          + "借期：" + item.borrowPeriod;
                        }
                        else if (patronBarcode != item.borrower 
                            || String.IsNullOrEmpty(patronBarcode) == true) // 非本人的情况
                        {
                            strBorrowInfo = "借阅者：***<br/>"
                            + "借阅时间：" + item.borrowDate + "<br/>"
                            + "借期：" + item.borrowPeriod;
                        }
                        else
                        {
                            // 2016-8-16 修改isbn不能预约的情况
                            string tempBarcode = item.barcode;
                            if (tempBarcode.Contains("@refID:") == true)
                                tempBarcode = tempBarcode.Replace("@refID:", "refID-");

                            strBorrowInfo =
                                "<table style='width:100%;border:0px'>"
                                + "<tr>"
                                    + "<td class='info' style='border:0px'>借阅者：" + item.borrower + "<br/>"
                                                                + "借阅时间：" + item.borrowDate + "<br/>"
                                                                + "借期：" + item.borrowPeriod
                                        + "</td>"
                                    + "<td class='btn' style='border:0px'>";

                            if (String.IsNullOrEmpty(patronBarcode) == false)//isPatron == true) // 只有读者身份，才有预约按钮
                            {
                                strBorrowInfo += "<button class='mui-btn  mui-btn-default'  onclick=\"renew('" + tempBarcode + "')\">续借</button>";
                            }
                            strBorrowInfo += "</td>"
                                + "</tr>"
                                + "<tr><td colspan='2'><div id='renewInfo-" + tempBarcode + "'/></td></tr>"
                                + "</table>";

                            // 此时不能预约
                            bOwnBorrow = true;
                            reservationInfo = "<div class='remark'>该册目前是您在借中，不能预约。</div>";
                        }
                    }
                    item.borrowInfo = strBorrowInfo;

                    // 预约信息
                    if (bCanReservation == true && bOwnBorrow == false)
                    {
                        bool showReser = true;
                        if (disable == true || String.IsNullOrEmpty(patronBarcode)==true)//isPatron == false)
                            showReser = false;

                        string state = this.getReservationState(reserList, item.barcode);
                        reservationInfo = getReservationHtml(state, item.barcode, false, showReser);
                    }
                    item.reservationInfo = reservationInfo;
                }

===
        // 设置微信用户当前图书馆
        [HttpPost]
        public ApiResult SetLibId(string weixinId, string libId)
        {
            ApiResult result = new ApiResult();
            string error = "";

            string temp = libId;
            string bindLibraryCode = "";
            int nIndex = libId.IndexOf("~");
            if (nIndex > 0)
            {
                libId = temp.Substring(0, nIndex);
                bindLibraryCode = temp.Substring(nIndex + 1);
            }

            if (HttpContext.Current.Session[WeiXinConst.C_Session_sessioninfo] == null)
            {
                error = "session失效。";
                goto ERROR1;
            }
            SessionInfo sessionInfo = (SessionInfo)HttpContext.Current.Session[WeiXinConst.C_Session_sessioninfo];
            if (sessionInfo == null)
            {
                error = "session失效2。";
                goto ERROR1;
            }

            //如果选择的图书馆就是是当前活动帐户对应的图书馆，则不用处理
            if (sessionInfo.ActiveUser != null
                && sessionInfo.ActiveUser.libId == libId
                && sessionInfo.ActiveUser.bindLibraryCode == bindLibraryCode)
            {
                return result;
            }

            //// 如果当前活动帐户是一个临时public帐户
            //if (sessionInfo.ActiveUser != null
            //    && sessionInfo.ActiveUser.userName == WxUserDatabase.C_Public)
            //{
            //    //
            
            //}



            // 如果微信用户已经绑定了该图书馆的帐户，则设这个馆第一个帐户为活动帐户
            WxUserItem user = null;
            List<WxUserItem> list = WxUserDatabase.Current.Get(weixinId, libId, -1); //注意这里不区分分馆,在下面还是要看分馆
            if (list.Count > 0)
            {
                List<WxUserItem> foundList = new List<WxUserItem>();
                foreach (WxUserItem u in list)
                {
                    if (u.bindLibraryCode == bindLibraryCode)
                    {
                        user = u;
                        break;
                    }
                }
            }
            if (user == null) // 绑public身份创建一个帐号
            {
                // 先看看有没有public的,有的话，用绑定的实际帐号替换
                //注意这里不过滤图书馆，就是说临时选择的图书馆，如果未绑定正式帐户，则会被新选择的图书馆public帐户代替
                List<WxUserItem> publicList = WxUserDatabase.Current.GetWorkers(weixinId, "", WxUserDatabase.C_Public);
                if (publicList.Count > 0)
                {
                    user = publicList[0];
                    if (publicList.Count > 1)
                    {
                        dp2WeiXinService.Instance.WriteErrorLog("!!!异常：出现" + publicList.Count + "个public帐户?应该只有一个，把多余的帐户删除");
                        for (int i = 1; i < publicList.Count; i++)
                        {
                            WxUserDatabase.Current.SimpleDelete(publicList[i].id);
                        }
                    }

                    user.libId = libId;
                    Library lib = dp2WeiXinService.Instance.LibManager.GetLibrary(libId);
                    if (lib == null)
                    {
                        error = "未找到id=" + libId + "对应的图书馆";
                        goto ERROR1;
                    }
                    user.libName = lib.Entity.libName;
                    user.bindLibraryCode = bindLibraryCode;
                    if (string.IsNullOrEmpty(user.bindLibraryCode) == false)
                        user.libName = user.bindLibraryCode;

                    user.libraryCode = "";
                    WxUserDatabase.Current.Update(user);
                }
                else
                {
                    try
                    {
                        // 创建一个public帐号
                        user = WxUserDatabase.Current.CreatePublic(weixinId, libId, bindLibraryCode);
                    }
                    catch (Exception ex)
                    {
                        error = ex.Message;
                        goto ERROR1;
                    }
                }
            }

            // 设为当前帐户
            WxUserDatabase.Current.SetActivePatron1(user.weixinId, user.id);

            // 初始化sesson
            int nRet = sessionInfo.GetActiveUser(user.weixinId, out error);
            if (nRet == -1)
                goto ERROR1;

            //===================

            return result;

            ERROR1:
            result.errorCode = -1;
            result.errorInfo = error;
            return result;
        }


===

// 管理的分馆
            string[] libraryList = sessionInfo.ActiveUser.libraryCode.Split(new[] { ',' });

            // 读者类别
            string types = sessionInfo.ReaderTypes;
            string typesHtml = "";
            if (String.IsNullOrEmpty(types) == false)
            {
                string[] typeList = types.Split(new char[] { ',' });
                foreach (string type in typeList)
                {
                    // 如果这个类型的分馆 是当前帐户可用的分馆，才列出来
                    if (sessionInfo.ActiveUser.libraryCode != "")
                    {
                        int nIndex = type.LastIndexOf("}");
                        if (nIndex > 0)
                        {
                            string left = type.Substring(0, nIndex);
                            nIndex = left.IndexOf("{");
                            if (nIndex != -1)
                            {
                                left = left.Substring(nIndex + 1);

                                if (libraryList.Contains(left) == true)
                                {
                                    string sel = "";
                                    if (patron.readerType == left)
                                        sel = " selected ";


                                    typesHtml += "<option value='" + type + "' "+ sel +">" + type + "</option>";
                                }
                            }
                        }
                    }
                    else
                    {
                        string sel = "";
                        if (patron.readerType == type)
                            sel = " selected ";

                        typesHtml += "<option value='" + type + "' "+sel+">" + type + "</option>";
                    }
                }
            }
            typesHtml = "<select id='selReaderType' name='selReaderType' class='selArrowRight'>"
                    + "<option value=''>请选择</option>"
                    + typesHtml
                    + "</select>";
            ViewBag.readerTypeHtml = typesHtml;